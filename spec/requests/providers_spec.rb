require 'rails_helper'
require 'spec_helper'
require 'shared_contexts'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/providers', type: :request do
  include_context 'api request authentication helper methods'
  include_context 'api request global before and after hooks'

  # This should return the minimal set of attributes required to create a valid
  # Provider. As you add validations to Provider, be sure to
  # adjust the attributes here as well.
  let!(:user) { create(:user) }
  let(:valid_attributes) {
    FactoryBot.build(:provider, :with_bank, user: user).as_json
  }

  let(:invalid_attributes) {
    FactoryBot.build(:provider, :with_bank, user: user, name: nil).as_json
  }
  before :each do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Provider.create! valid_attributes
      get providers_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      provider = Provider.create! valid_attributes
      get provider_url(provider)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_provider_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      provider = Provider.create! valid_attributes
      get edit_provider_url(provider)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Provider' do
        expect {
          post providers_url, params: { provider: valid_attributes }
        }.to change(Provider, :count).by(1)
      end

      it 'redirects to providers' do
        post providers_url, params: { provider: valid_attributes }
        expect(response).to redirect_to(providers_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Provider' do
        expect {
          post providers_url, params: { provider: invalid_attributes }
        }.to change(Provider, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    before :each do
      sign_in user
    end
    context 'with valid parameters' do
      let(:new_attributes) {
        valid_attributes[:contact_name] = "#{Faker::Name.first_name} #{Faker::Name.last_name}"
        valid_attributes[:cell_phone] = Faker::Bank.account_number(digits: 10)
        valid_attributes[:account] = Faker::Bank.account_number(digits: 15)
        valid_attributes[:account] 
        valid_attributes
      }

      it 'updates the requested provider' do
        provider = Provider.create! valid_attributes
        patch provider_url(provider), params: { provider: new_attributes, id: provider.id }
        provider.reload
        expect(Provider.find(provider.id).contact_name ).to eq(new_attributes[:contact_name])
      end

      it 'redirects to the provider' do
        provider = Provider.create! valid_attributes
        patch provider_url(provider), params: { provider: new_attributes }
        provider.reload
        expect(response).to redirect_to(providers_url)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested provider' do
      provider = Provider.create! valid_attributes
      expect {
        delete provider_url(provider)
      }.to change(Provider, :count).by(-1)
    end

    it 'redirects to the providers list' do
      provider = Provider.create! valid_attributes
      delete provider_url(provider)
      expect(response).to redirect_to(providers_url)
    end
  end
end
